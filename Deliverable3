pip install python-dotenv
pip install flask openai requests beautifulsoup4 sentence-transformers transformers
pip install flask openai python-dotenv requests beautifulsoup4 sentence-transformers transformers
import os
import openai
from flask import Flask, request, jsonify, render_template
from dotenv import load_dotenv
import requests
from bs4 import BeautifulSoup
from sentence_transformers import SentenceTransformer, util
from transformers import pipeline
import threading

# Load environment variables
load_dotenv()

# Set up OpenAI API
openai.api_key = os.getenv("OPENAI_API_KEY")

class URLValidator:
    def __init__(self):
        self.serpapi_key = os.getenv("SERPAPI_KEY")
        self.similarity_model = None
        self.fake_news_classifier = None
        self.sentiment_analyzer = None

    def initialize_models(self):
        print("Initializing models...")
        self.similarity_model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
        self.fake_news_classifier = pipeline("text-classification", model="mrm8488/bert-tiny-finetuned-fake-news-detection")
        self.sentiment_analyzer = pipeline("text-classification", model="cardiffnlp/twitter-roberta-base-sentiment")
        print("Models initialized.")

    def fetch_page_content(self, url: str) -> str:
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, "html.parser")
            return " ".join([p.text for p in soup.find_all("p")])
        except requests.RequestException:
            return ""

    def get_domain_trust(self, url: str, content: str) -> int:
        if not content:
            return 50
        result = self.fake_news_classifier(content[:512])[0]
        return 100 if result["label"] == "REAL" else 30 if result["label"] == "FAKE" else 50

    def compute_similarity_score(self, user_query: str, content: str) -> int:
        if not content:
            return 0
        return int(util.pytorch_cos_sim(self.similarity_model.encode(user_query), self.similarity_model.encode(content)).item() * 100)

    def check_facts(self, content: str) -> int:
        return 50  # Simplified for this example

    def check_google_scholar(self, url: str) -> int:
        return 50  # Simplified for this example

    def detect_bias(self, content: str) -> int:
        if not content:
            return 50
        sentiment_result = self.sentiment_analyzer(content[:512])[0]
        return 100 if sentiment_result["label"] == "POSITIVE" else 50 if sentiment_result["label"] == "NEUTRAL" else 30

    def get_star_rating(self, score: float) -> tuple:
        stars = max(1, min(5, round(score / 20)))
        return stars, "⭐" * stars

    def generate_explanation(self, domain_trust, similarity_score, fact_check_score, bias_score, citation_score, final_score) -> str:
        reasons = []
        if domain_trust < 50:
            reasons.append("The source has low domain authority.")
        if similarity_score < 50:
            reasons.append("The content is not highly relevant to your query.")
        if fact_check_score < 50:
            reasons.append("Limited fact-checking verification found.")
        if bias_score < 50:
            reasons.append("Potential bias detected in the content.")
        if citation_score < 30:
            reasons.append("Few citations found for this content.")
        return " ".join(reasons) if reasons else "This source is highly credible and relevant."

    def rate_url_validity(self, user_query: str, url: str) -> dict:
        content = self.fetch_page_content(url)
        
        domain_trust = self.get_domain_trust(url, content)
        similarity_score = self.compute_similarity_score(user_query, content)
        fact_check_score = self.check_facts(content)
        bias_score = self.detect_bias(content)
        citation_score = self.check_google_scholar(url)

        final_score = (
            (0.3 * domain_trust) +
            (0.3 * similarity_score) +
            (0.2 * fact_check_score) +
            (0.1 * bias_score) +
            (0.1 * citation_score)
        )

        stars, icon = self.get_star_rating(final_score)
        explanation = self.generate_explanation(domain_trust, similarity_score, fact_check_score, bias_score, citation_score, final_score)

        return {
            "User Query": user_query,
            "URL": url,
            "Final Validity Score": final_score,
            "Star Rating": stars,
            "Star Icon": icon,
            "Explanation": explanation,
        }

app = Flask(__name__)
validator = URLValidator()

# Start model initialization in a separate thread
threading.Thread(target=validator.initialize_models).start()

def get_chatbot_response(user_input):
    if user_input.lower().startswith("validate url:"):
        parts = user_input.split(":", 2)
        if len(parts) == 3:
            url = parts[2].strip()
            result = validator.rate_url_validity(parts[1].strip(), url)
            return f"URL Validation Result:\nURL: {result['URL']}\nValidity Score: {result['Final Validity Score']:.2f}\nRating: {result['Star Icon']}\nExplanation: {result['Explanation']}"
    
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": user_input}
        ]
    )
    return response.choices[0].message['content']

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    user_input = request.json['message']
    if not validator.similarity_model:
        return jsonify({'response': "I'm still initializing. Please try again in a moment."})
    response = get_chatbot_response(user_input)
    return jsonify({'response': response})

if __name__ == '__main__':
    print("Starting the application...")
    app.run(debug=True, use_reloader=False)
